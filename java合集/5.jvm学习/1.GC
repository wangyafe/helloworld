1.分代回收
  1.1 回收的是内存模型中的java堆 1.2 java堆又分为新生代（复制算法）、老年代（标记整理） 1.3 新生代又分为eden tosurvivor From Survivor 默认8：1：1
  1.4 分代垃圾回收器：新生代收集器：Serial、ParNew、Parallel Scavenge 老年代收集器：CMS、Serial Old、Parallel Old
  1.5 整堆垃圾回收器：G1（大数据系统使用）
2.垃圾回收器实现
 2.1.serial:单线程
 2.2.parNew：多线程
 2.3.paraller: 吞吐量优先级大于停顿时间（stw）
 2.4.CMC（Concurrent Mark-Sweep 使用标记清除算法）:停顿时间优先级大于吞吐量
回收步骤：
初始标记：标记GC Roots能直接到的对象（GC Roots是这个对象本身的属性）。速度很快但是仍存在Stop The World问题。 （什么是被 GC Roots 直接引用的对象？ https://blog.csdn.net/shuiCSDN/article/details/104145483）
并发标记：进行GC Roots Tracing 的过程，找出存活对象且用户线程可并发执行。
重新标记：为了修正并发标记期间因用户程序继续运行而导致标记产生变动的那一部分对象的标记记录。仍然存在Stop The World（停顿时间）问题。
并发清除：对标记的对象进行清除回收
3.Yong Gc（新生代回收）比full GC（整堆及方法区回收）快原因：
  3.1 年轻代比老年代（old GC）存活的对象要少很多;
  3.2 老年代除了标记清除之外, 还要进行内存碎片的清理, 另外还有可能发生Concurrent Mode Failure;
4.1.标记-清除算法：标记无用对象，然后进行清除回收。缺点：效率不高，无法清除垃圾碎片。
  2.标记-整理算法：标记无用对象，让所有存活的对象都向一端移动，然后直接清除掉端边界以外的内存。
  3.复制算法：按照容量划分二个大小相等的内存区域，当一块用完的时候将活着的对象复制到另一块上，然后再把已使用的内存空间一次清理掉。缺点：内存使用率不高，只有原来的一半
5.【证】:那些可作为GC Roots的对象 https://blog.csdn.net/u010798968/article/details/72835255
  1.虚拟机栈中局部变量引用的对象（栈）2.本地方法栈中引用的对象（栈） 3.方法区中常量和静态变量引用的对象
6. 引用类型：
 6.1 强引用：发生 gc 的时候不会被回收。
 6.2 软引用：有用但不是必须的对象，在发生内存溢出之前会被回收。
 6.3 弱引用：有用但不是必须的对象，在下一次GC时会被回收。
 6.4 虚引用（幽灵引用/幻影引用）：无法通过虚引用获得对象，用 PhantomReference 实现虚引用，虚引用的用途是在 gc 时返回一个通知
7. 老大难的 GC 原理及调优，这下全说清楚了 https://www.6aiq.com/article/1570200567790
8.Java中9种常见的CMS GC问题分析与解决(GC 问题分类) https://tech.meituan.com/2020/11/12/java-9-cms-gc.html
9.查看JVM使用的默认的垃圾收集器 https://blog.csdn.net/qq9808/article/details/80933396
