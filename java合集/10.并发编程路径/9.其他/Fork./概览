1.ForkJoin框架 也是一种线程池 ForkJoinPool
 1.1要解决的问题：处理分割 计算子任务 合并任务 而ThreadPoolExector无法等待子任务结果 再处理父任务
 1.2【高并发】什么是ForkJoin？看这一篇就够了！ https://www.cnblogs.com/binghe001/p/12683253.html
 1.3 默认线程数是cpu核心数
2.存在的问题
 　2.1. 是否需要并行（开启线程池也需要资源）  
　 2.2. 任务之间是否是独立的？是否会引起任何竞态条件（1.写 2.线程公共变量 会引起并发） 
　 2.3. 结果是否取决于任务的调用顺序
3.并发解决办法 公共变量变为线程变量 继承 RecursiveTask或者RecursiveAction写任务
4.主线程占用一个cpu核心数
5.013-多线程-基础-Fork/Join框架、parallelStream讲解 https://www.cnblogs.com/bjlhx/p/11131197.html
6.自定义 ForkJoinPool 提升并行流 ParallelStream 执行速度 https://developer.aliyun.com/article/715684
  6.1 Parallel Stream，默认采用的是一个 ForkJoinPool.commonPool 的线程池 2.jvm公用这个pool 3.其他任务也用了并行流
