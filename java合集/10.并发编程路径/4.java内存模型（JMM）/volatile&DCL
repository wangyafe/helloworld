1.volatile
2.单例模式和DCL（双重检查） https://juejin.cn/post/6844903782187270151
   3.1 并发环境下单例模式两种实现方式：1.synchronized锁+DCL +volatile 
   public class Singleton(){
            private volatile Singleton singleton;
            //防止外部实例化
            private Singleton();
            public static Singleton getInstance(){
                  if(singleton == null){//第一次检查
                        synchronized(Singleton.class){
                           if(singleton == null){//第二次检查
                                 singleton = new Singleton();
                           }
                        }
                  }
                  return singleton;
            }
   }
   2.基于类初始化
   public class Singleton(){
      private static class SingletonHolder(){
         public static Singleton singleton = new Singleton();
      }
      public static Singleton getInstance(){
         return SingletonHolder.singleton;
      }
   }
   2.2 DCL应用在缓存雪崩 
3.啃完这53道Java并发面试宝典，并发相关面试再也难不倒你！ https://www.jianshu.com/p/10d084e01dc5
  volatile应用场景和作用：1.禁止指令重排（as-if-serial 在单线程环境下不能改变程序运行的结果） 2.可见性 一写多读
