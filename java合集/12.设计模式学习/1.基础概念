1.23种设计模式全解析 https://www.cnblogs.com/susanws/p/5510229.html
2.创建型（五种）：
      0.简单工厂：1.普通简单工厂：1.接口 2.多个实现类 3.单个生产方法工厂类（type标识）
                  2.多方法：1.接口 2.多个实现类 3.多个生产方法工厂类
                  3.静态方法：1.接口 2.多个实现类 3.多个静态生产方法工厂类
      1.工厂方法模式：1.接口 2.多个实现类 3.工厂接口 4.多个工厂类
      2.抽象工厂模式：
      3.单例模式：
      4.建造者模式：
      5.原型模式（prototype）:1.浅拷贝 实现克隆接口 2.深拷贝 IO流读写
3.结构型（七种）：
      1.适配器模式（类的适配，将一个类的功能扩展到一个接口里）：1.功能类 2.扩展接口 3.继承类并实现扩展接口
          1.2 对象的适配器模式（类的功能扩展到一个接口）1.功能类 2.扩展接口 3.实现接口 引入功能类
          1.3 接口的适配器模式（不须实现全部接口方法）1.接口 2.抽象类实现接口 3.重载目标接口方法
      2.装饰模式（动态为一个类增加功能）：1.接口 2.实现类 3.增强功能类 引入实现类 实现接口
      3.代理模式（动态为一个类增加功能）：1.接口 2.实现类 3.增强功能类 引入实例 实现接口
      4.外观模式：1.多个功能类 2.一个综合类 把功能类交织一起
      5.桥接模式：1.接口 2.多个实现类 3.定义桥 持有接口
      6.组合模式：1.类的成员属性包含类本身 2.集合属性包含自身
      7.享元模式：对象放入容器中
4.关系型：
     1.父类和子类： 1.策略模式：1.接口 2.抽象类 3.继承类并实现接口 4.通过上下文找到功能类
                    2.模板方法模式（通过抽象类完成子类调用）：1.抽象类（实现方法调用抽象方法） 2.继承抽象类 实现抽象方法
     2.类之间：1.观察者模式（通知所有对象）：1.接口 2.多个实现类 3.subject接口 4.抽象类实现subject接口 集合里放对象 循环调用方法 5.继承类
               2.迭代子模式：集合方法基于数组实现
               3.责任链模式：1.接口 2.抽象类 持有接口引用 3.继承抽象类（获取接口实例）实现接口  4.新建各种实例set到抽象类
               4.命令模式：1.invoker类 2.命令接口 3.命令类（引用接收者） 4.接受类
    3.类的状态（保存对象状态）：1.备忘录模式：1.原始类 2.保存类 3.容器类（保存类是其属性）
                               2.状态模式: 1.状态类 2.上下文类 根据不同状态调方法
    4.中间类：1.访问者模式：1.接口 2.访问类（主体） 2.主体接口及实现（调用访问者方法）
              2.中介者模式：1.协调者接口 2.协调者实现（包括多个参与者） 3.参与者抽象类 4.参与者实现类
              4.解释器模式：1.接口 2.多个解释实现类（包含context)
5.顺口溜记23种设计模式 https://blog.csdn.net/wyg_031113/article/details/106236206?share_token=c76907bd-66da-4d57-8371-a9012a1e134e
    5.1 设计模式：引入接口后 处理对象或类的关系 1.A继承B 2.B作为A的成员变量 3.A的构造方法或普通方法包含B 4.A、B都作为基类的成员 5.中间类或者消息队列
    5.2 1.构建型：如何构建 在哪里构建及缓存 2.结构型：如何组织对象形成数据结构 3.行为型：封装逻辑处理流程 看作算法封装
    5.3 两个对象之间很好的交互方法 https://blog.csdn.net/chunyou128/article/details/6666709
