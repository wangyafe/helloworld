1.服务注册与发现 zookeeper
  1.0 具有的功能（1.数据订阅和发布（动态配置） 2.分布式锁和分布式队列 3.集群管理 4.master选举 5.命名服务）
  1.1 讲解 Zookeeper 的五个核心知识点 https://mp.weixin.qq.com/s/W6QgmFTpXQ8EL-dVvLWsyg
  1.2 Dubbo注册中心（ZooKeeper、Redis）实现原理 https://juejin.cn/post/6850418115017179143#heading-16
  1.3 redis作为注册中心 https://blog.csdn.net/weixin_43810802/article/details/106882022
  1.4 使用zookeeper实现配置动态管理 https://www.jianshu.com/p/14ab38601fe1
  1.5 1.zookeeper= 1.文件系统 +2.监听通知机制 2.设计模式角度是观察者模式
2.架构
 2.1 微服务（springboot+dubbo）
 2.2 RPC
   2.2.1 ESB（企业服务总线）相关知识点总结 https://www.jianshu.com/p/10ec5b86296f
 2.3 SOA
 2.4 service mesh 
    2.4.1 蚂蚁金服 Service Mesh 大规模落地系列 - Operator 篇 https://juejin.cn/post/6844904021866741774#heading-4
这些年业界的服务端架构理念一直在持续演进，从单体模块化架构，到SOA，再到微服务icon，最后到Service Mesh，所有这些架构模式无一不在强调解耦icon和复用，而Service Mesh是所有架构模式中解耦和复用最彻底的，通过将与业务逻辑无关的服务治理逻辑下沉，让业务开发人员与基础技术开发人员关注点分离，各司其职，大大提升了研发效能；
举例来说，Service Mesh 之前的微服务架构，一般会引入一个RPCicon框架来完成整个RPC的调用过程。RPC-client嵌在调用方进程里，RPC-server是服务进程；假如要扩展负载均衡方案，比如轮询、随机、哈希....,只能升级RPC Client, 同样的，当要增加监控告警、链路追踪、流量控制....等新的功能时需要不断要求业务开发人员升级RPC Client 版本，业务开发人员与基础技术开发人员关注点没有做到分离。
因此，需要将服务拆分成两个进程，一个进程实现业务逻辑（biz，即图中白色方块），一个进程实现底层技术体系（proxy，即图中蓝色方块），如下图：
1、 biz和proxy本地部署，共同消亡，虚线方框
2、biz和proxy之间本地通信，图中黑色箭头
3、所有biz之间的通讯，都通过proxy完成，proxy之间才存在远端连接，即图中红色箭头，这样就实现了业务开发人员与基础技术开发人员关注点的分离，如果所有节点都实现了如上解耦，整个架构会演变为service mesh网格
3.springCloud
👉👉👉冒着挂科的风险也要给你们看的 Spring Cloud 入门总结 https://juejin.cn/post/6844904007975043079
  3.1 zuul 微服务网关（《吃透微服务》 - 服务网关之Gateway https://cloud.tencent.com/developer/article/1840237）
  3.2 Hystrix 服务降级熔断器（运行在应用层）
  3.3 Ribbon 进程内负载均衡器 （运行在应用层）
  3.4 Eureka 注册中心
  3.5 Fegin 服务调用映射
  3.6 Config + Bus 动态配置
4.分布式服务框架资料汇总 https://www.cnblogs.com/qingfengEthan/p/12636046.html
5.微服务应用(二十二)：微服务架构之服务治理 http://www.gxitsky.com/article/1616752873224281
