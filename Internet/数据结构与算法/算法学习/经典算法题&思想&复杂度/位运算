1.位运算n & (n-1)的妙用 https://blog.csdn.net/navyifanr/article/details/19496459 2.二进制中 1 的个数 http://www.cyc2018.xyz/%E7%AE%97%E6%B3%95/%E5%89%91%E6%8C%87%20Offer%20%E9%A2%98%E8%A7%A3/15.%20%E4%BA%8C%E8%BF%9B%E5%88%B6%E4%B8%AD%201%20%E7%9A%84%E4%B8%AA%E6%95%B0.html#%E9%A2%98%E7%9B%AE%E9%93%BE%E6%8E%A5
3.位运算（&、|、^、~、>>、<<） https://www.runoob.com/w3cnote/bit-operation.html
  3.1 1.按位与 2.按位或 3.异或运算 4.取反 5.右移运算 6.左移运算
  3.2 1.两个相等的元素异或的结果为 0 2.0 与任意数 x 异或的结果都为 x
4.负数的二进制表示（反码+1） https://www.jianshu.com/p/6c518e7b4690
5.不用加减乘除做加法 http://www.cyc2018.xyz/%E7%AE%97%E6%B3%95/%E5%89%91%E6%8C%87%20Offer%20%E9%A2%98%E8%A7%A3/65.%20%E4%B8%8D%E7%94%A8%E5%8A%A0%E5%87%8F%E4%B9%98%E9%99%A4%E5%81%9A%E5%8A%A0%E6%B3%95.html
 5.1 1.a^b不考虑进位两数之和 2.（a&b<<1）表示进位
6.负数为何在内存中以补码的形式存在？ https://blog.csdn.net/pseudonym_/article/details/71275964
  6.0畅谈计算机整数，浮点数存储和运算（1.有符号 2.无符号 3.乘除用加法+移位）
  6.1补码系统的最大优点是可以在加法或减法处理中，不需因为数字的正负而使用不同的计算方式。只要一种加法电路就可以处理各种有符号数加法，而且减法可以用一个数加上另一个数的补码来表示，因此只要有加法电路和补码电路即可以完成各种有符号数加法和减法，在电路设计上相当方便
7.Java中>>和>>>移位操作符的区别（有符：高位正补0负补1 无符号：高位补0 正数两者相同负数不同） https://www.iteblog.com/archives/740.html
8. 用最有效率的方法算出 2 乘以 8 等於几 2<<3 二进制左移
9.一文读懂原码、反码与补码 https://segmentfault.com/a/1190000021511009
10.为什么源码里经常出现这种骚操作？ https://www.toutiao.com/article/6945744170250240524/?log_from=4dfc9fc4066ae_1659751189254
