1.找零钱（1.初始化一维数组 2.从下至上 状态来自起点 3.状态是钱 从一块到target）
class Solution {
    public int coinChange(int[] coins, int amount) {
        // 初始化备忘录,用amount+1填满备忘录,amount+1 表示该值不可以用硬币凑出来
        int[] dp = new int[amount + 1];
        Arrays.fill(dp,amount+1);
        // 设置初始条件为 0
        dp[0]=0;
        for (int coin : coins) {
            for (int i = coin; i <= amount; i++) {
                // 根据动态转移方程求出最小值
                if(coin <= i) {
                    dp[i]=Math.min(dp[i],dp[i-coin]+1);
                }
            }
        }
        // 如果 `dp[amount] === amount+1`说明没有最优解返回-1,否则返回最优解
        return dp[amount] == amount+1 ? -1 : dp[amount];
    }
}
2.最长公共子序列（1.初始化二维数组 2.从顶至下（状态来自左右及右下角））
class Solution {
    public int longestCommonSubsequence(String text1, String text2) {
 char[] charsA = text1.toCharArray();
        char[] charsB = text2.toCharArray();
        int n = charsA.length;
        int m = charsB.length;
        int[][] dp = new int[n][m];
        dp[n-1][m-1] = charsA[n-1]==charsB[m-1]?1:0;

        for (int i = n-2; i >= 0; i--) {
            dp[i][m-1] = charsA[i] == charsB[m-1]?1:dp[i+1][m-1];
        }

        for (int j = m-2; j >= 0; j--) {
            dp[n-1][j] = charsA[n-1] == charsB[j]?1:dp[n-1][j+1];
        }

        for (int i = n-2; i >= 0; i--) {
            for (int j = m-2; j >= 0; j--) {
                int p1 = dp[i][j+1];
                int p2 = dp[i+1][j];
                int p3 = charsA[i]==charsB[j]?(1+dp[i+1][j+1]):0;
                dp[i][j] = Math.max(p1,Math.max(p2,p3));
            }
        }
        return dp[0][0];
    }
}
1.步骤（代码：1.初始化数组及边界 2.循环及条件更新dp状态）
 1.确定实体变量及函数意义（1.变量是问题中的(确定一维数组还是二维数组) 2.函数值是结果）
 2.状态转移方程（0.利用递归思想（1.从顶自下 2.从下至上）1.找dp(i) 和 dp(i-1) 的关系 2.初始化dp数组（边界问题(1.一维数组起点边界 2.二维数组行列边界)））
 3.遍历顺序及执行条件（1.从顶自下 2.从下至上）
 4.判断是否有最优解（1.打印数组 2.举例推导）
5.一文搞懂动态规划 https://www.toutiao.com/article/6811687124945863179/?app=news_article&timestamp=1683300581&use_new_style=1&req_id=2023050523294102214AEF0EA7D41840BD&group_id=6811687124945863179&share_token=9ab874da-6f7a-422b-b887-a4d5f3be0e41&source=m_redirect
6.动态规划（JAVA）-最长公共子序列 https://blog.csdn.net/qq_35374224/article/details/128187489?share_token=9838bc71-6bfc-4f21-b46c-3e76f81af18a
7.力扣https://leetcode.cn/problems/longest-common-subsequence/
