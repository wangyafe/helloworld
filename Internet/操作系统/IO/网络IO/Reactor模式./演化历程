0.处理流程（1.read 2.业务处理 3.write）
 1.一个连接一个进程时(一对一)，进程可以采用“read -> 业务处理 -> write”的处理流程，如果当前连接没有数据可以读，则进程就阻塞在read操作上
 2.一个进程处理多个连接（一对多），进程阻塞在某个连接的read操作上，此时即使其他连接有数据可读，进程也无法去处理
 3.最简单的方式是将read操作改为非阻塞，然后进程不断地轮询多个连接(1.消耗cpu 2.轮询效率低)
 4.使用事件监听模式 监听有三种方法（1.select 2.poll 3.epoll） 4.1 数据准备就绪 交给read线程
2.Reactor模式也叫Dispatcher模式（事件监听模式）
  2.1 Reactor模式的核心组成部分包括Reactor和处理资源池（进程池或线程池）
  2.2 Reactor负责监听和分配事件，处理资源池 负责处理事件
  2.3 Reactor模式的具体实现方案（1.reactor数量可变 2.资源池数量可变）
   1.单Reactor单进程/线程
   2.单Reactor多线程
   3.多Reactor多进程/线程（多Reactor单进程”方案仅仅是一个理论上的方案，实际没有应用，与单单相比既复杂又没有性能优势）
 3.34单服务器高性能模式：Reactor与Proactor（上） https://www.toutiao.com/article/7137641138730566182/?log_from=e9f819b423a6b_1662532988984
4.Reactor是非阻塞同步网络模型，因为真正的read和send操作都需要用户进程同步操作 
 3.1 进程请求IO（无论是硬盘还是网络IO），先让内核读取数据到内核缓存，然后从内核缓存读取到进程。
 3.2 这里面就有2个IO等待时间，第一个是读取到内核缓存，第二个是读取到进程。前者花费的时间远远大于后者。
 3.3 在第一个时间中进程不做等待就是NIO，即非阻塞。第二个时间中进程也不需要等待就是AIO，即异步
