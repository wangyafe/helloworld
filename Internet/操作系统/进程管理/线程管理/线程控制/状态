1.就绪 2.阻塞 3.睡眠（不释放锁） 4.等待（释放锁） 5.挂起（调离出内存，将其调到外存） 6.执行
 1.1 （1.让出cpu 2.内核态和用户态的切换）操作系统层面的阻塞函数（如I/O操作）便是在调用时将所在线程的状态改为了阻塞状态后让出CPU
 1.2 操作系统的线程调度程序在选择要执行的线程时只会选择就绪态的线程
 1.3 直到阻塞线程所调用的阻塞方法发起中断并返回后阻塞线程才可以继续向下执行
2.这次我们从底层把线程说清楚 https://www.cnblogs.com/niuyourou/p/11877269.html
3.Java中线程等待和线程阻塞的区别？(1.主动被动 2.线程状态可控) https://blog.csdn.net/PanYiAn9/article/details/126252372
 3.1 线程阻塞和等待的区别_19.线程调度 https://blog.csdn.net/weixin_39933508/article/details/111579414
4.【并发基础】一篇文章带你彻底搞懂睡眠、阻塞、挂起、终止之间的区别 https://blog.csdn.net/cy973071263/article/details/129372087
 是主动调用，使线程进入到阻塞状态：
4.1（配合synchronized使用）线程执行了一个对象的wait()方法，直接进入阻塞状态，等待其他线程执行notify()或者notifyAll()方法。
4.2线程执行了Thread.sleep(int millsecond);方法，当前线程放弃CPU，睡眠一段时间，然后再恢复执行。
