1.单体模块化系统应该有的能力：
 核心功能：1.用户管理2.权限管理3.数据统计4.图表展示和统计5.数据库服务
 周边功能：1.性能和安全2.事务和并发3.监控和日志4.告警和度量5.链路追踪和异常
2.分布式系统注意点：
 2.1 应对高并发1.缓存2.限流3.降级4.熔断5.隔离
 2.2 注意点：1.系统间减少依赖2.幂等设计3.设置超时4.重试策略5.灰度和回滚方案6.线上压测7.系统分级8.判重判空读写条件+单元测试+日志+业务情况组合（1.大数据 2.复合嵌套）9.数据初始化+新老数据+数据同步一致性（1.增删改 2.建立关联关系后）+数据层级结构
 2.3 高并发五个利器（缓存、限流、降级、熔断、隔离）降级是停掉不重要模块 熔断是不去请求有问题的服务 会进行试探什么时候可以 什么时候把流量分过去 隔离是防止阻塞扩散 https://zhuanlan.zhihu.com/p/61363959
 2.4 java分布式系统开关功能设计(服务升降级) https://blog.csdn.net/iamzhongyong/article/details/84449762?utm_medium=distribute.wap_relevant.none-task-blog-baidujs_title-0&share_token=d180ea2e-9a07-45eb-a398-a845353d0b87
3.如何设计一个好的接口/API https://blog.csdn.net/Jin_Kwok/article/details/104857416
  1.边界问题（通讯协议1.http 2.RPC 3.websocket） 2.单一职责 3.接口隔离 4.面向对象语言六大原则 5.多层级调用 1.熔断2.降级3.隔离 4.重试 5.超时 6.分布式事务 
  6.API的1.幂等 2.并发（1.线程安全(1.1 不同接口的并发安全 1.2 同接口多写低版本) 2.大流量带来的可用性 3.及时释放数据库链接） 3.本地事务
 3.2 原则: 1.单一职责 2.依赖倒置（抽象） 3.开闭（面向扩展开放 面向修改封闭 即需要修改的时候新增类 而不是修改类内部） 4.里氏替换 5.接口隔离 6.迪米特原则（减少耦合与依赖）
 3.3 目标：1.可读性 2.可扩展 3.复用性 4.易维护
