1.单服务器高性能的关键之一就是服务器采取的并发模型，并发模型有如下两个关键设计点：1.服务器如何管理连接 2.服务器如何处理请求
2.以上两个设计点最终都和操作系统的I/O模型及进程模型相关。
 1.I/O模型：阻塞、非阻塞、同步、异步 2.进程模型：单进程、多进程、多线程
3.单服务器高性能模式：PPC与TPC
4.32单服务器高性能模式：PPC与TPC（上） https://www.toutiao.com/article/7137241364684784143/?log_from=27f3de741959e_1662464455761
5.33单服务器高性能模式：PPC与TPC（下） https://www.toutiao.com/article/7137242782732648993/?log_from=6fccd3e222138_1662530862457
 1.PPC和TPC能够支持的最大连接数差不多，都是几百个(占资源和上下文切换很耗费性能 C/C++的喜欢用多进程，Java用多线程)
  1.1 BIO：阻塞IO，PPC和TPC属于这种
  1.2 NIO：多路复用IO，reactor就是基于这种技术
  1.3 AIO：异步io，Proactor就是基于这种技术
6.0.处理流程（1.read 2.业务处理 3.write）
 1.一个连接一个进程时(一对一)，进程可以采用“read -> 业务处理 -> write”的处理流程，如果当前连接没有数据可以读，则进程就阻塞在read操作上
 2.一个进程处理多个连接（一对多），进程阻塞在某个连接的read操作上，此时即使其他连接有数据可读，进程也无法去处理
 3.最简单的方式是将read操作改为非阻塞，然后进程不断地轮询多个连接(1.消耗cpu 2.轮询效率低)
 4.使用事件监听模式 监听有三种方法（1.select 2.poll 3.epoll） 4.1 数据准备就绪 交给read线程
2.Reactor模式也叫Dispatcher模式（事件监听模式）
  2.1 Reactor模式的核心组成部分包括Reactor和处理资源池（进程池或线程池）
  2.2 Reactor负责监听和分配事件，处理资源池 负责处理事件
  2.3 Reactor模式的具体实现方案（1.reactor数量可变 2.资源池数量可变）
   1.单Reactor单进程/线程
   2.单Reactor多线程
   3.多Reactor多进程/线程（多Reactor单进程”方案仅仅是一个理论上的方案，实际没有应用，与单单相比既复杂又没有性能优势）
 3.34单服务器高性能模式：Reactor与Proactor（上） https://www.toutiao.com/article/7137641138730566182/?log_from=e9f819b423a6b_1662532988984
7.单Reactor单进程/线程(无法发挥多核CPU的性能) 2.单Reactor多线程(Reactor承担所有事件的监听和响应，只在主线程中运行，瞬间高并发时会成为性能瓶颈)
 7.1 35单服务器高性能模式：Reactor与Proactor（中） https://www.toutiao.com/article/7138377755053425189/?log_from=fab18d4b09347_1662541902176
8.多reactor多进程/线程（1.子进程的subReactor将mainReactor分配的连接加入连接队列进行监听，并创建一个Handler用于处理连接的各种事件 2.read阻塞 内核拷贝到进程 3.无法处理下一个连接）
 8.1 Reactor是非阻塞同步网络模型，因为真正的read和send操作都需要用户进程同步操作
 8.2 Proactor（1.将Proactor和Handler都通过Asynchronous Operation Processor注册到内核 2.不阻塞read）
 8.3 36单服务器高性能模式：Reactor与Proactor（下） https://www.toutiao.com/article/7138376314122289700/?log_from=c3decf018d258_1662541574332
