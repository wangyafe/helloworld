1.sql(分库分表) 2.Nosql（Memcache的key-value结构、Redis的复杂数据结构、MongoDB的文档数据结构） 3.小文件（数量大 如图片 微博） 4.大文件（数量小 空间大）
2.存储平台化
1.1（分库分表做到自动化和平台化）假如公司业务继续发展，规模继续扩大，SQL服务器越来越多，如果每个业务都基于统一的数据库中间件独立部署自己的SQL集群，就会导致新的复杂度问题，具体表现在：
 1.数据库资源使用率不高，比较浪费 2.各SQL集群分开维护，投入的维护成本越来越高。
 2.因此，实力雄厚的大公司此时一般都会在SQL集群上构建SQL存储平台，以对业务透明的形式提供资源分配、数据备份、迁移、容灾、读写分离、分库分表等一系列服务，
 3.如淘宝的UMP（Unifed MySQL Platform）系统
1.2 所以，NoSQL发展到一定规模后，通常都会在NoSQL集群的基础之上再实现统一存储平台，统一存储平台主要实现这几个功能：
 1 资源动态按需动态分配：例如同一台Memcache服务器，可以根据内存利用率，分配给多个业务使用。
 2 资源自动化管理：例如新业务只需要申请多少Memcache缓存空间就可以了，无需关注具体是哪些Memcache服务器在为自己提供服务。
 3.故障自动化处理：例如某台Memcache服务器挂掉后，有另外一台备份Memcache服务器能立刻接管缓存请求，不会导致丢失很多缓存数据。
 4.当然要发展到这个阶段，一般也是大公司才会这么做，简单来说就是如果只有几十台NoSQL服务器，做存储平台收益不大；但如果有几千台NoSQL服务器，NoSQL存储平台就能够产生很大的收益
1.3 得益于开源运动的发展和最近几年大数据的火爆，在开源方案的基础上封装一个小文件存储平台并不是太难的事情。
 1.例如，HBase、Hadoop、Hypertable、FastDFS等都可以作为小文件存储的底层平台，只需要将这些开源方案再包装一下基本上就可以用了。
 2.典型的小文件存储有：淘宝的TFS、京东JFS、Facebook的Haystack
1.4 所以大数据存储和处理这块反而是最简单的，因为你没有太多选择，只能用这几个流行的开源方案，例如，Hadoop、HBase、Storm、Hive等。
 1.实力雄厚一些的大公司会基于这些开源方案，结合自己的业务特点，封装成大数据平台，例如淘宝的云梯系统、腾讯的TDW系统
3.64架构模板：“存储层”技术 https://www.toutiao.com/article/7148385927625835046/?log_from=9bfddea56f1d3_1664711029307
