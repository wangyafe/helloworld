1.将数据和操作定义在一起，就是 DDD，全称叫领域驱动设计（Domain Driven Design，简称 DDD）
 1.1 (行为和状态分离到不同的对象中)贫血模型最早广泛应用源于EJB2，最强盛时期则是由Spring创造，将：“行为”（逻辑、过程）； “状态”（数据，对应到语言就是对象成员变量）分离到不同的对象中：
   1.1.1只有状态的对象就是所谓的“贫血对象”（常称为VO——Value Object）；
   1.1.2只有行为的对象就是，我们常见的N层结构中的Logic/Service/Manager层（对应到EJB2中的Stateless Session Bean）。
   1.1.3——曾经Spring的作者Rod Johnson也承认，Spring不过是在沿袭EJB2时代的“事务脚本”，也就是面向过程编程
 1.2 充血模型 面向对象设计的本质是：“一个对象是拥有状态和行为的”
2.Domain Primitive（1.DP 是封装了状态和行为的对象 2.ddd中的基础概念）
 2.1 四个维度去分析一下架构：1.接口的清晰度（可阅读性） 2.数据验证和错误处理 3.业务逻辑代码的清晰度 4.可测试性
3.因此实际工程场景中，是否使用，如何使用还依赖于设计者以及团队充血模型设计的理解和把握
 3.1 因为现在绝大多数J2EE开发者都受贫血模型影响非常深。另外，实际工程场景中使用充血模型，还会碰到很多很多细节问题
 3.2 其中最大的难关就是“如何设计充血模型”或者说“如何从复杂的业务中分离出恰到好处且包含语义的逻辑放到VO的行为中
4.DDD领域驱动设计 https://dinghuang.github.io/2021/03/18/DDD%E9%A2%86%E5%9F%9F%E9%A9%B1%E5%8A%A8%E8%AE%BE%E8%AE%A1/#%E5%9B%9B%E7%A7%8D-Domain-%E6%A8%A1%E5%BC%8F
 4.1 阿里技术专家详解 DDD 系列- Domain Primitive https://zhuanlan.zhihu.com/p/80921515
