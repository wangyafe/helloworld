1.61微内核架构 https://www.toutiao.com/article/7147985876566573599/?log_from=34d085deac82_1664417054419
 1.1 微内核架构（Microkernel Architecture），也被称为插件化架构（Plug-in Architecture），是一种面向功能进行拆分的可扩展性架构，
 1.2 例如Eclipse这类IDE软件、UNIX这类操作系统、淘宝App这类客户端软件等
 1.3 也有一些企业将自己的业务系统设计成微内核的架构，例如保险公司的保险核算逻辑系统，不同的保险品种可以将逻辑封装成插件
 1.4 微内核架构包含两类组件:1.核心系统（core system） 2.插件模块（plug-in modules）
 1.5 核心系统负责和具体业务功能无关的通用功能，例如模块加载、模块间通信等
 1.6 插件模块负责实现具体的业务逻辑，例如专栏前面经常提到的“学生信息管理”系统中的“手机号注册”功能
2.关键设计：1.插件管理 2.插件连接 3.插件通信
 2.1 管理：哪些插件可用，如何加载这些插件，什么时候加载插件。常见的实现方法是插件注册表机制
 2.2 连接：连接机制有OSGi（Eclipse使用）、消息模式、依赖注入（Spring使用），甚至使用分布式的协议都是可以的，比如RPC或者HTTP Web的方式
3.OSGi一个微内核的架构模式 
 1.1 OSGi更是成为了首选的插件化标准
 1.2 OSGi的最早设计也是针对嵌入式应用的，诸如机顶盒、服务网关、手机、汽车等都是其应用的主要环境
 1.3 由于OSGi具备动态化、热插拔、高可复用性、高效性、扩展方便等优点，它被应用到了PC上的应用开发
 1.4 Eclipse采用的OSGi框架称为Equinox，类似的实现还有Apache的Felix、Spring的Spring DM
2.OSGI实战教程【Spring DM】编写一个简单的Bundle组件 https://blog.csdn.net/lyliyongblue/article/details/78376941
4.规则引擎从结构上来看也属于微内核架构的一种具体实现
 4.1 规则引擎在计费、保险、促销等业务领域应用较多。例如电商促销，常见的促销规则有：满100送50，3件立减50 ，3件8折，第3件免费，跨店满200减100，新用户立减50
 4.2 开发人员将业务功能分解提炼为多个规则，将规则保存在规则库中。
 4.3 业务人员根据业务需要，通过将规则排列组合，配置成业务流程，保存在业务库中。
 4.4 规则引擎执行业务流程实现业务功能
 
5.一文读懂微内核架构 https://cloud.tencent.com/developer/article/1768675
 1.1 API 面向业务开发人员，而 SPI 面向框架开发人员

