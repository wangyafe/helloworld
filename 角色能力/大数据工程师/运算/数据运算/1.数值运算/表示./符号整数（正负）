0.所有这些转换都是在计算机的最底层进行的，而在我们使用的高级语言中使用的都是原码
 0.1 反码与补码都是为了解决负数运算问题，跟正数没关系，因此，不管是正整数还是正小数，原码，反码，补码都全部相同
1.构成：符号位+数值位
 1.1 用+和-来表示正数和负数，但是在计算机中我们用0和1来表示正、负号。
2.带符号的数的表示方法
 2.1 在计算机中，对有符号的数常常用原码、反码和补码3中方式表示。主要目的是用来解决减法运算的问题。
 2.2 原码：由符号位和有效值部分组成，在符号位中，正数的符号位用0表示，负数的符号位用1表示。有效值部分用二进制绝对值表示。
 2.3 反码：正数的反码和原码相同，负数的反码的计算方式是对原码除了符号位之外各个位都取反。比如：0变1，1变0
   2.3.1 反码目的：解决负数加法运算问题，将减法运算转换为加法运算，从而简化运算规则；
 2.4 补码：正数补码相同，负数的补码是在反码的基础上加1
  2.4.1 补码目的：补码：解决负数加法运算正负零问题，弥补了反码的不足
 2.5 注：对于0这个特殊值，正数0和负数0都是表示0
3.计算机设计补码的目的有以下几个：
 3.1 能够使得符号位与有效值部分一起参与运算，从而简化运算规则。
 3.2 使得减法法运算转换为加法运算，进一步简化计算机中运算器的线路设计。
4.定点数与浮点数
数值除了有正负之分，还有整数与小数之分。
划分依据：根据小数点的位置是否固定
划分：定点整数、定点小数和浮点数
定点整数：即小数点的位置是固定的，表示的数（即符号位右边，有效值）是一个确定的整数
定点小数：小数点隐含固定在某一个位置上的小数。通常将小数点固定在最高数据位的左边。
浮点数：顾名思义，小数点位置不固定、可浮动的数据。既有整数部分，也有小数部分。
常用的浮点数又有2种：单精度浮点数（32位）和双精度浮点数（64位）
5.原码、反码、补码的博客 https://www.cnblogs.com/qq2143187807/p/16683189.html
